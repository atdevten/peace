name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===========================================
  # BACKEND JOBS
  # ===========================================
  
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: peace_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        cache-dependency-path: backend/go.sum

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage

    - name: Run linter
      uses: golangci/golangci-lint-action@v6
      with:
        working-directory: ./backend
        version: latest

    - name: Build backend
      run: go build -o bin/server ./cmd/server

    - name: Build WebSocket server
      run: go build -o bin/websocket-server ./cmd/websocket-server

  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: backend/gosec.sarif

  # ===========================================
  # FRONTEND JOBS
  # ===========================================
  
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      run: npm run test

    - name: Build frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: web/.next/

  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # # ===========================================
  # # DOCKER BUILD & PUSH
  # # ===========================================
  
  # docker-build:
  #   name: Build & Push Docker Images
  #   runs-on: ubuntu-latest
  #   needs: [backend-test, frontend-test]
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
  #   permissions:
  #     contents: read
  #     packages: write

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Log in to Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ${{ env.REGISTRY }}
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Extract metadata
  #     id: meta
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: |
  #         ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
  #         ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
  #       tags: |
  #         type=raw,value=latest,enable={{is_default_branch}}
  #         type=sha,prefix={{branch}}-

  #   - name: Build and push backend image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./backend
  #       file: ./backend/Dockerfile
  #       push: true
  #       tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  #   - name: Build and push frontend image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./web
  #       file: ./web/Dockerfile
  #       push: true
  #       tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  # # ===========================================
  # # DEPLOYMENT (Docker Compose)
  # # ===========================================
  
  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [docker-build]
  #   if: github.ref == 'refs/heads/main'
  #   environment: production

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Deploy to production server
  #     uses: appleboy/ssh-action@v1.0.3
  #     with:
  #       host: ${{ secrets.PRODUCTION_HOST }}
  #       username: ${{ secrets.PRODUCTION_USER }}
  #       key: ${{ secrets.PRODUCTION_SSH_KEY }}
  #       script: |
  #         cd /opt/peace
  #         docker-compose -f docker-compose.production.yml pull
  #         docker-compose -f docker-compose.production.yml up -d
  #         docker system prune -f

  # # ===========================================
  # # NOTIFICATION
  # # ===========================================
  
  # notify:
  #   name: Notify Deployment Status
  #   runs-on: ubuntu-latest
  #   needs: [deploy-staging, deploy-production]
  #   if: always()

  #   steps:
  #   - name: Notify Slack
  #     uses: 8398a7/action-slack@v3
  #     with:
  #       status: ${{ job.status }}
  #       channel: '#deployments'
  #       webhook_url: ${{ secrets.SLACK_WEBHOOK }}
  #     if: always()
