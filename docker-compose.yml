services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: peace_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: peace
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - peace_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d peace"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: peace_app
    restart: unless-stopped
    environment:
      # Server config
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0

      # Database config
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: peace
      POSTGRES_SSLMODE: disable

      # Redis config
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0

      # App config
      ENVIRONMENT: production
      LOG_LEVEL: info

      # JWT config
      JWT_SECRET: your-secret-key-change-in-production
      JWT_EXPIRATION: 24h
      JWT_REFRESH_EXPIRATION: 168h

      # Cache config
      CACHE_TTL: 300s
      CACHE_ENABLED: true
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - peace_network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: peace_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - peace_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  peace_network:
    driver: bridge
