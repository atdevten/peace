services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: peace_postgres_local
    restart: unless-stopped
    environment:
      POSTGRES_DB: peace_local
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: local_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_local_data:/var/lib/postgresql/data
    networks:
      - peace_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d peace_local"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: peace_redis_local
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_local_data:/data
    networks:
      - peace_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Data Importer (runs once on startup)
  data-importer:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: peace_data_importer_local
    restart: "no"
    env_file:
      - ./backend/configs/docker.env
    volumes:
      - ./backend:/app
      - go_cache:/go
      - ./quotes.csv.zip:/app/quotes.csv.zip:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - peace_network
    command: >
      sh -c "
        # Wait for database to be fully ready
        sleep 5 &&
        # Check if quotes already exist
        QUOTE_COUNT=$$(echo 'SELECT COUNT(*) FROM quotes;' | PGPASSWORD=local_password psql -h postgres -U postgres -d peace_local -t -A 2>/dev/null | tr -d ' ') &&
        if [ \"$$QUOTE_COUNT\" -gt \"0\" ]; then
          echo '‚úÖ Found '$$QUOTE_COUNT' quotes in database. Skipping import.'
        else
          echo 'üìù No quotes found. Starting import...' &&
          go run ./cmd/data-importer/main.go -config ./configs/docker.env -file ./quotes.csv.zip -workers 5 -batch-size 50 &&
          echo '‚úÖ Data import completed successfully!'
        fi
      "

  # Backend API (built locally)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: peace_backend_local
    restart: unless-stopped
    env_file:
      - ./backend/configs/docker.env
    volumes:
      - ./backend:/app
      - go_cache:/go
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      data-importer:
        condition: service_completed_successfully
    networks:
      - peace_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.localhost`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # WebSocket Server (built locally)
  websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: peace_websocket_local
    restart: unless-stopped
    env_file:
      - ./backend/configs/docker.env
    volumes:
      - ./backend:/app
      - go_cache:/go
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - peace_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.websocket.rule=Host(`ws.localhost`)"
      - "traefik.http.routers.websocket.entrypoints=web"
      - "traefik.http.services.websocket.loadbalancer.server.port=8081"
    command:
      [
        "go",
        "run",
        "./cmd/websocket-server/main.go",
        "-config",
        "./configs/docker.env",
      ]
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8081/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (built locally)
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://api.localhost/api
        NEXT_PUBLIC_WS_URL: ws://ws.localhost/ws
    container_name: peace_frontend_local
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://api.localhost/api
      NEXT_PUBLIC_WS_URL: ws://ws.localhost/ws
    depends_on:
      - backend
      - websocket
    networks:
      - peace_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.web-frontend.entrypoints=web"
      - "traefik.http.services.web-frontend.loadbalancer.server.port=3000"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://0.0.0.0:3000",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: peace_traefik_local
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8090:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - peace_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.service=api@internal"

volumes:
  postgres_local_data:
    driver: local
  redis_local_data:
    driver: local
  go_cache:
    driver: local

networks:
  peace_network:
    driver: bridge
