services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: peace_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: peace
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - peace_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d peace"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application with hot reload
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: peace_app
    restart: unless-stopped
    environment:
      # Server config
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0

      # Database config
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: peace
      POSTGRES_SSLMODE: disable

      # Redis config
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0

      # App config
      ENVIRONMENT: development
      LOG_LEVEL: debug

      # JWT config
      JWT_SECRET: dev-secret-key
      JWT_EXPIRATION: 24h
      JWT_REFRESH_EXPIRATION: 168h

      # Cache config
      CACHE_TTL: 300s
      CACHE_ENABLED: true
    ports:
      - "8080:8080"
      - "2345:2345" # Delve debugger port
    volumes:
      - ./backend:/app
      - go_cache:/go
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - peace_network

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: peace_redis_dev
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - peace_network
    command: redis-server --appendonly yes

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  go_cache:
    driver: local

networks:
  peace_network:
    driver: bridge
