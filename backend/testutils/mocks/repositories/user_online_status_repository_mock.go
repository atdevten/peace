// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repositories/user_online_status_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/repositories/user_online_status_repository.go -destination=testutils/mocks/repositories/user_online_status_repository_mock.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/atdevten/peace/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUserOnlineStatusRepository is a mock of UserOnlineStatusRepository interface.
type MockUserOnlineStatusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserOnlineStatusRepositoryMockRecorder
	isgomock struct{}
}

// MockUserOnlineStatusRepositoryMockRecorder is the mock recorder for MockUserOnlineStatusRepository.
type MockUserOnlineStatusRepositoryMockRecorder struct {
	mock *MockUserOnlineStatusRepository
}

// NewMockUserOnlineStatusRepository creates a new mock instance.
func NewMockUserOnlineStatusRepository(ctrl *gomock.Controller) *MockUserOnlineStatusRepository {
	mock := &MockUserOnlineStatusRepository{ctrl: ctrl}
	mock.recorder = &MockUserOnlineStatusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserOnlineStatusRepository) EXPECT() *MockUserOnlineStatusRepositoryMockRecorder {
	return m.recorder
}

// DeleteByUserID mocks base method.
func (m *MockUserOnlineStatusRepository) DeleteByUserID(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserID indicates an expected call of DeleteByUserID.
func (mr *MockUserOnlineStatusRepositoryMockRecorder) DeleteByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserID", reflect.TypeOf((*MockUserOnlineStatusRepository)(nil).DeleteByUserID), ctx, userID)
}

// GetByUserID mocks base method.
func (m *MockUserOnlineStatusRepository) GetByUserID(ctx context.Context, userID string) (*entities.UserOnlineStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].(*entities.UserOnlineStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockUserOnlineStatusRepositoryMockRecorder) GetByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockUserOnlineStatusRepository)(nil).GetByUserID), ctx, userID)
}

// GetOnlineCount mocks base method.
func (m *MockUserOnlineStatusRepository) GetOnlineCount(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineCount", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineCount indicates an expected call of GetOnlineCount.
func (mr *MockUserOnlineStatusRepositoryMockRecorder) GetOnlineCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineCount", reflect.TypeOf((*MockUserOnlineStatusRepository)(nil).GetOnlineCount), ctx)
}

// GetOnlineUsers mocks base method.
func (m *MockUserOnlineStatusRepository) GetOnlineUsers(ctx context.Context) ([]*entities.UserOnlineStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineUsers", ctx)
	ret0, _ := ret[0].([]*entities.UserOnlineStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineUsers indicates an expected call of GetOnlineUsers.
func (mr *MockUserOnlineStatusRepositoryMockRecorder) GetOnlineUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineUsers", reflect.TypeOf((*MockUserOnlineStatusRepository)(nil).GetOnlineUsers), ctx)
}

// Save mocks base method.
func (m *MockUserOnlineStatusRepository) Save(ctx context.Context, status *entities.UserOnlineStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserOnlineStatusRepositoryMockRecorder) Save(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserOnlineStatusRepository)(nil).Save), ctx, status)
}

// UpdateLastSeen mocks base method.
func (m *MockUserOnlineStatusRepository) UpdateLastSeen(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastSeen", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastSeen indicates an expected call of UpdateLastSeen.
func (mr *MockUserOnlineStatusRepositoryMockRecorder) UpdateLastSeen(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastSeen", reflect.TypeOf((*MockUserOnlineStatusRepository)(nil).UpdateLastSeen), ctx, userID)
}
