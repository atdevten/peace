// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repositories/quote_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/repositories/quote_repository.go -destination=testutils/mocks/repositories/quote_repository_mock.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/atdevten/peace/internal/domain/entities"
	repositories "github.com/atdevten/peace/internal/domain/repositories"
	value_objects "github.com/atdevten/peace/internal/domain/value_objects"
	gomock "go.uber.org/mock/gomock"
)

// MockQuoteRepository is a mock of QuoteRepository interface.
type MockQuoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteRepositoryMockRecorder
	isgomock struct{}
}

// MockQuoteRepositoryMockRecorder is the mock recorder for MockQuoteRepository.
type MockQuoteRepositoryMockRecorder struct {
	mock *MockQuoteRepository
}

// NewMockQuoteRepository creates a new mock instance.
func NewMockQuoteRepository(ctrl *gomock.Controller) *MockQuoteRepository {
	mock := &MockQuoteRepository{ctrl: ctrl}
	mock.recorder = &MockQuoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteRepository) EXPECT() *MockQuoteRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockQuoteRepository) Create(ctx context.Context, quote *entities.Quote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, quote)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockQuoteRepositoryMockRecorder) Create(ctx, quote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQuoteRepository)(nil).Create), ctx, quote)
}

// Delete mocks base method.
func (m *MockQuoteRepository) Delete(ctx context.Context, id *value_objects.QuoteID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQuoteRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuoteRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockQuoteRepository) GetAll(ctx context.Context) ([]*entities.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entities.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockQuoteRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockQuoteRepository)(nil).GetAll), ctx)
}

// GetByFilter mocks base method.
func (m *MockQuoteRepository) GetByFilter(ctx context.Context, filter *repositories.QuoteFilter) ([]*entities.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", ctx, filter)
	ret0, _ := ret[0].([]*entities.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockQuoteRepositoryMockRecorder) GetByFilter(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockQuoteRepository)(nil).GetByFilter), ctx, filter)
}

// GetByID mocks base method.
func (m *MockQuoteRepository) GetByID(ctx context.Context, id *value_objects.QuoteID) (*entities.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockQuoteRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockQuoteRepository)(nil).GetByID), ctx, id)
}

// GetRandom mocks base method.
func (m *MockQuoteRepository) GetRandom(ctx context.Context) (*entities.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandom", ctx)
	ret0, _ := ret[0].(*entities.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandom indicates an expected call of GetRandom.
func (mr *MockQuoteRepositoryMockRecorder) GetRandom(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandom", reflect.TypeOf((*MockQuoteRepository)(nil).GetRandom), ctx)
}

// Update mocks base method.
func (m *MockQuoteRepository) Update(ctx context.Context, quote *entities.Quote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, quote)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockQuoteRepositoryMockRecorder) Update(ctx, quote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockQuoteRepository)(nil).Update), ctx, quote)
}
