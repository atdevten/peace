// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repositories/tag_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/repositories/tag_repository.go -destination=testutils/mocks/repositories/tag_repository_mock.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/atdevten/peace/internal/domain/entities"
	repositories "github.com/atdevten/peace/internal/domain/repositories"
	value_objects "github.com/atdevten/peace/internal/domain/value_objects"
	gomock "go.uber.org/mock/gomock"
)

// MockTagRepository is a mock of TagRepository interface.
type MockTagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTagRepositoryMockRecorder
	isgomock struct{}
}

// MockTagRepositoryMockRecorder is the mock recorder for MockTagRepository.
type MockTagRepositoryMockRecorder struct {
	mock *MockTagRepository
}

// NewMockTagRepository creates a new mock instance.
func NewMockTagRepository(ctrl *gomock.Controller) *MockTagRepository {
	mock := &MockTagRepository{ctrl: ctrl}
	mock.recorder = &MockTagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagRepository) EXPECT() *MockTagRepositoryMockRecorder {
	return m.recorder
}

// AddTagToQuote mocks base method.
func (m *MockTagRepository) AddTagToQuote(ctx context.Context, quoteID *value_objects.QuoteID, tagID *value_objects.TagID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagToQuote", ctx, quoteID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTagToQuote indicates an expected call of AddTagToQuote.
func (mr *MockTagRepositoryMockRecorder) AddTagToQuote(ctx, quoteID, tagID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagToQuote", reflect.TypeOf((*MockTagRepository)(nil).AddTagToQuote), ctx, quoteID, tagID)
}

// Create mocks base method.
func (m *MockTagRepository) Create(ctx context.Context, tag *entities.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTagRepositoryMockRecorder) Create(ctx, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTagRepository)(nil).Create), ctx, tag)
}

// Delete mocks base method.
func (m *MockTagRepository) Delete(ctx context.Context, id *value_objects.TagID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTagRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTagRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockTagRepository) GetAll(ctx context.Context) ([]*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTagRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTagRepository)(nil).GetAll), ctx)
}

// GetByFilter mocks base method.
func (m *MockTagRepository) GetByFilter(ctx context.Context, filter *repositories.TagFilter) (*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", ctx, filter)
	ret0, _ := ret[0].(*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockTagRepositoryMockRecorder) GetByFilter(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockTagRepository)(nil).GetByFilter), ctx, filter)
}

// GetByID mocks base method.
func (m *MockTagRepository) GetByID(ctx context.Context, id *value_objects.TagID) (*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTagRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTagRepository)(nil).GetByID), ctx, id)
}

// GetByQuoteID mocks base method.
func (m *MockTagRepository) GetByQuoteID(ctx context.Context, quoteID *value_objects.QuoteID) ([]*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByQuoteID", ctx, quoteID)
	ret0, _ := ret[0].([]*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByQuoteID indicates an expected call of GetByQuoteID.
func (mr *MockTagRepositoryMockRecorder) GetByQuoteID(ctx, quoteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByQuoteID", reflect.TypeOf((*MockTagRepository)(nil).GetByQuoteID), ctx, quoteID)
}

// RemoveTagFromQuote mocks base method.
func (m *MockTagRepository) RemoveTagFromQuote(ctx context.Context, quoteID *value_objects.QuoteID, tagID *value_objects.TagID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagFromQuote", ctx, quoteID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagFromQuote indicates an expected call of RemoveTagFromQuote.
func (mr *MockTagRepositoryMockRecorder) RemoveTagFromQuote(ctx, quoteID, tagID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagFromQuote", reflect.TypeOf((*MockTagRepository)(nil).RemoveTagFromQuote), ctx, quoteID, tagID)
}

// Update mocks base method.
func (m *MockTagRepository) Update(ctx context.Context, tag *entities.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTagRepositoryMockRecorder) Update(ctx, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTagRepository)(nil).Update), ctx, tag)
}
