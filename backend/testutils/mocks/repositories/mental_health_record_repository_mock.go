// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repositories/mental_health_record_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/repositories/mental_health_record_repository.go -destination=testutils/mocks/repositories/mental_health_record_repository_mock.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/atdevten/peace/internal/domain/entities"
	repositories "github.com/atdevten/peace/internal/domain/repositories"
	value_objects "github.com/atdevten/peace/internal/domain/value_objects"
	gomock "go.uber.org/mock/gomock"
)

// MockMentalHealthRecordRepository is a mock of MentalHealthRecordRepository interface.
type MockMentalHealthRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMentalHealthRecordRepositoryMockRecorder
	isgomock struct{}
}

// MockMentalHealthRecordRepositoryMockRecorder is the mock recorder for MockMentalHealthRecordRepository.
type MockMentalHealthRecordRepositoryMockRecorder struct {
	mock *MockMentalHealthRecordRepository
}

// NewMockMentalHealthRecordRepository creates a new mock instance.
func NewMockMentalHealthRecordRepository(ctrl *gomock.Controller) *MockMentalHealthRecordRepository {
	mock := &MockMentalHealthRecordRepository{ctrl: ctrl}
	mock.recorder = &MockMentalHealthRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMentalHealthRecordRepository) EXPECT() *MockMentalHealthRecordRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMentalHealthRecordRepository) Create(ctx context.Context, record *entities.MentalHealthRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMentalHealthRecordRepositoryMockRecorder) Create(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMentalHealthRecordRepository)(nil).Create), ctx, record)
}

// Delete mocks base method.
func (m *MockMentalHealthRecordRepository) Delete(ctx context.Context, id *value_objects.MentalHealthRecordID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMentalHealthRecordRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMentalHealthRecordRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockMentalHealthRecordRepository) GetAll(ctx context.Context) ([]*entities.MentalHealthRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entities.MentalHealthRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMentalHealthRecordRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMentalHealthRecordRepository)(nil).GetAll), ctx)
}

// GetByFilter mocks base method.
func (m *MockMentalHealthRecordRepository) GetByFilter(ctx context.Context, filter *repositories.MentalHealthRecordFilter) ([]*entities.MentalHealthRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", ctx, filter)
	ret0, _ := ret[0].([]*entities.MentalHealthRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockMentalHealthRecordRepositoryMockRecorder) GetByFilter(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockMentalHealthRecordRepository)(nil).GetByFilter), ctx, filter)
}

// GetByID mocks base method.
func (m *MockMentalHealthRecordRepository) GetByID(ctx context.Context, id *value_objects.MentalHealthRecordID) (*entities.MentalHealthRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.MentalHealthRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMentalHealthRecordRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMentalHealthRecordRepository)(nil).GetByID), ctx, id)
}

// GetDistinctDatesForUser mocks base method.
func (m *MockMentalHealthRecordRepository) GetDistinctDatesForUser(ctx context.Context, userID *value_objects.UserID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistinctDatesForUser", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistinctDatesForUser indicates an expected call of GetDistinctDatesForUser.
func (mr *MockMentalHealthRecordRepositoryMockRecorder) GetDistinctDatesForUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistinctDatesForUser", reflect.TypeOf((*MockMentalHealthRecordRepository)(nil).GetDistinctDatesForUser), ctx, userID)
}

// Update mocks base method.
func (m *MockMentalHealthRecordRepository) Update(ctx context.Context, record *entities.MentalHealthRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMentalHealthRecordRepositoryMockRecorder) Update(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMentalHealthRecordRepository)(nil).Update), ctx, record)
}
