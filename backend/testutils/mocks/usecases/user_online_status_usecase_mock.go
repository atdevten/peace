// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/usecases/user_online_status_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/usecases/user_online_status_usecase.go -destination=testutils/mocks/usecases/user_online_status_usecase_mock.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	entities "github.com/atdevten/peace/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUserOnlineStatusUseCase is a mock of UserOnlineStatusUseCase interface.
type MockUserOnlineStatusUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserOnlineStatusUseCaseMockRecorder
	isgomock struct{}
}

// MockUserOnlineStatusUseCaseMockRecorder is the mock recorder for MockUserOnlineStatusUseCase.
type MockUserOnlineStatusUseCaseMockRecorder struct {
	mock *MockUserOnlineStatusUseCase
}

// NewMockUserOnlineStatusUseCase creates a new mock instance.
func NewMockUserOnlineStatusUseCase(ctrl *gomock.Controller) *MockUserOnlineStatusUseCase {
	mock := &MockUserOnlineStatusUseCase{ctrl: ctrl}
	mock.recorder = &MockUserOnlineStatusUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserOnlineStatusUseCase) EXPECT() *MockUserOnlineStatusUseCaseMockRecorder {
	return m.recorder
}

// GetOnlineCount mocks base method.
func (m *MockUserOnlineStatusUseCase) GetOnlineCount(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineCount", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineCount indicates an expected call of GetOnlineCount.
func (mr *MockUserOnlineStatusUseCaseMockRecorder) GetOnlineCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineCount", reflect.TypeOf((*MockUserOnlineStatusUseCase)(nil).GetOnlineCount), ctx)
}

// GetOnlineUsers mocks base method.
func (m *MockUserOnlineStatusUseCase) GetOnlineUsers(ctx context.Context) ([]*entities.UserOnlineStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineUsers", ctx)
	ret0, _ := ret[0].([]*entities.UserOnlineStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineUsers indicates an expected call of GetOnlineUsers.
func (mr *MockUserOnlineStatusUseCaseMockRecorder) GetOnlineUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineUsers", reflect.TypeOf((*MockUserOnlineStatusUseCase)(nil).GetOnlineUsers), ctx)
}

// GetUserOnlineStatus mocks base method.
func (m *MockUserOnlineStatusUseCase) GetUserOnlineStatus(ctx context.Context, userID string) (*entities.UserOnlineStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOnlineStatus", ctx, userID)
	ret0, _ := ret[0].(*entities.UserOnlineStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOnlineStatus indicates an expected call of GetUserOnlineStatus.
func (mr *MockUserOnlineStatusUseCaseMockRecorder) GetUserOnlineStatus(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOnlineStatus", reflect.TypeOf((*MockUserOnlineStatusUseCase)(nil).GetUserOnlineStatus), ctx, userID)
}

// IsUserOnline mocks base method.
func (m *MockUserOnlineStatusUseCase) IsUserOnline(ctx context.Context, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserOnline", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserOnline indicates an expected call of IsUserOnline.
func (mr *MockUserOnlineStatusUseCaseMockRecorder) IsUserOnline(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserOnline", reflect.TypeOf((*MockUserOnlineStatusUseCase)(nil).IsUserOnline), ctx, userID)
}

// SetUserOffline mocks base method.
func (m *MockUserOnlineStatusUseCase) SetUserOffline(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserOffline", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserOffline indicates an expected call of SetUserOffline.
func (mr *MockUserOnlineStatusUseCaseMockRecorder) SetUserOffline(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserOffline", reflect.TypeOf((*MockUserOnlineStatusUseCase)(nil).SetUserOffline), ctx, userID)
}

// SetUserOnline mocks base method.
func (m *MockUserOnlineStatusUseCase) SetUserOnline(ctx context.Context, userID, userEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserOnline", ctx, userID, userEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserOnline indicates an expected call of SetUserOnline.
func (mr *MockUserOnlineStatusUseCaseMockRecorder) SetUserOnline(ctx, userID, userEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserOnline", reflect.TypeOf((*MockUserOnlineStatusUseCase)(nil).SetUserOnline), ctx, userID, userEmail)
}

// UpdateUserLastSeen mocks base method.
func (m *MockUserOnlineStatusUseCase) UpdateUserLastSeen(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastSeen", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastSeen indicates an expected call of UpdateUserLastSeen.
func (mr *MockUserOnlineStatusUseCaseMockRecorder) UpdateUserLastSeen(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastSeen", reflect.TypeOf((*MockUserOnlineStatusUseCase)(nil).UpdateUserLastSeen), ctx, userID)
}
