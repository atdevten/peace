// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/usecases/quote_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/usecases/quote_usecase.go -destination=testutils/mocks/usecases/quote_usecase_mock.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	entities "github.com/atdevten/peace/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockQuoteUseCase is a mock of QuoteUseCase interface.
type MockQuoteUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteUseCaseMockRecorder
	isgomock struct{}
}

// MockQuoteUseCaseMockRecorder is the mock recorder for MockQuoteUseCase.
type MockQuoteUseCaseMockRecorder struct {
	mock *MockQuoteUseCase
}

// NewMockQuoteUseCase creates a new mock instance.
func NewMockQuoteUseCase(ctrl *gomock.Controller) *MockQuoteUseCase {
	mock := &MockQuoteUseCase{ctrl: ctrl}
	mock.recorder = &MockQuoteUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteUseCase) EXPECT() *MockQuoteUseCaseMockRecorder {
	return m.recorder
}

// CreateQuote mocks base method.
func (m *MockQuoteUseCase) CreateQuote(ctx context.Context, content, author string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuote", ctx, content, author)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuote indicates an expected call of CreateQuote.
func (mr *MockQuoteUseCaseMockRecorder) CreateQuote(ctx, content, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuote", reflect.TypeOf((*MockQuoteUseCase)(nil).CreateQuote), ctx, content, author)
}

// DeleteQuote mocks base method.
func (m *MockQuoteUseCase) DeleteQuote(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuote", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuote indicates an expected call of DeleteQuote.
func (mr *MockQuoteUseCaseMockRecorder) DeleteQuote(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuote", reflect.TypeOf((*MockQuoteUseCase)(nil).DeleteQuote), ctx, id)
}

// GetAllQuotes mocks base method.
func (m *MockQuoteUseCase) GetAllQuotes(ctx context.Context) ([]*entities.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuotes", ctx)
	ret0, _ := ret[0].([]*entities.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuotes indicates an expected call of GetAllQuotes.
func (mr *MockQuoteUseCaseMockRecorder) GetAllQuotes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuotes", reflect.TypeOf((*MockQuoteUseCase)(nil).GetAllQuotes), ctx)
}

// GetQuoteByID mocks base method.
func (m *MockQuoteUseCase) GetQuoteByID(ctx context.Context, id string) (*entities.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuoteByID", ctx, id)
	ret0, _ := ret[0].(*entities.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuoteByID indicates an expected call of GetQuoteByID.
func (mr *MockQuoteUseCaseMockRecorder) GetQuoteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuoteByID", reflect.TypeOf((*MockQuoteUseCase)(nil).GetQuoteByID), ctx, id)
}

// GetQuotesByFilter mocks base method.
func (m *MockQuoteUseCase) GetQuotesByFilter(ctx context.Context, author, content *string) ([]*entities.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotesByFilter", ctx, author, content)
	ret0, _ := ret[0].([]*entities.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotesByFilter indicates an expected call of GetQuotesByFilter.
func (mr *MockQuoteUseCaseMockRecorder) GetQuotesByFilter(ctx, author, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotesByFilter", reflect.TypeOf((*MockQuoteUseCase)(nil).GetQuotesByFilter), ctx, author, content)
}

// GetRandomQuote mocks base method.
func (m *MockQuoteUseCase) GetRandomQuote(ctx context.Context) (*entities.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote", ctx)
	ret0, _ := ret[0].(*entities.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockQuoteUseCaseMockRecorder) GetRandomQuote(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockQuoteUseCase)(nil).GetRandomQuote), ctx)
}

// UpdateQuote mocks base method.
func (m *MockQuoteUseCase) UpdateQuote(ctx context.Context, id, content, author string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuote", ctx, id, content, author)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuote indicates an expected call of UpdateQuote.
func (mr *MockQuoteUseCaseMockRecorder) UpdateQuote(ctx, id, content, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuote", reflect.TypeOf((*MockQuoteUseCase)(nil).UpdateQuote), ctx, id, content, author)
}
