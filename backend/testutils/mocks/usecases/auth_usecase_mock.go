// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/usecases/auth_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/usecases/auth_usecase.go -destination=testutils/mocks/usecases/auth_usecase_mock.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	commands "github.com/atdevten/peace/internal/application/commands"
	entities "github.com/atdevten/peace/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthUseCase is a mock of AuthUseCase interface.
type MockAuthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUseCaseMockRecorder
	isgomock struct{}
}

// MockAuthUseCaseMockRecorder is the mock recorder for MockAuthUseCase.
type MockAuthUseCaseMockRecorder struct {
	mock *MockAuthUseCase
}

// NewMockAuthUseCase creates a new mock instance.
func NewMockAuthUseCase(ctrl *gomock.Controller) *MockAuthUseCase {
	mock := &MockAuthUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUseCase) EXPECT() *MockAuthUseCaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthUseCase) Login(ctx context.Context, command commands.LoginCommand) (*entities.User, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, command)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Login indicates an expected call of Login.
func (mr *MockAuthUseCaseMockRecorder) Login(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUseCase)(nil).Login), ctx, command)
}

// LoginWithGoogle mocks base method.
func (m *MockAuthUseCase) LoginWithGoogle(ctx context.Context, code string) (*entities.User, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithGoogle", ctx, code)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// LoginWithGoogle indicates an expected call of LoginWithGoogle.
func (mr *MockAuthUseCaseMockRecorder) LoginWithGoogle(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithGoogle", reflect.TypeOf((*MockAuthUseCase)(nil).LoginWithGoogle), ctx, code)
}

// Refresh mocks base method.
func (m *MockAuthUseCase) Refresh(ctx context.Context, accessToken, refreshToken string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, accessToken, refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthUseCaseMockRecorder) Refresh(ctx, accessToken, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthUseCase)(nil).Refresh), ctx, accessToken, refreshToken)
}

// Register mocks base method.
func (m *MockAuthUseCase) Register(ctx context.Context, command commands.RegisterCommand) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, command)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthUseCaseMockRecorder) Register(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthUseCase)(nil).Register), ctx, command)
}
