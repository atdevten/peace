// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/usecases/tag_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/usecases/tag_usecase.go -destination=testutils/mocks/usecases/tag_usecase_mock.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	commands "github.com/atdevten/peace/internal/application/commands"
	entities "github.com/atdevten/peace/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockTagUseCase is a mock of TagUseCase interface.
type MockTagUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTagUseCaseMockRecorder
	isgomock struct{}
}

// MockTagUseCaseMockRecorder is the mock recorder for MockTagUseCase.
type MockTagUseCaseMockRecorder struct {
	mock *MockTagUseCase
}

// NewMockTagUseCase creates a new mock instance.
func NewMockTagUseCase(ctrl *gomock.Controller) *MockTagUseCase {
	mock := &MockTagUseCase{ctrl: ctrl}
	mock.recorder = &MockTagUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagUseCase) EXPECT() *MockTagUseCaseMockRecorder {
	return m.recorder
}

// AddTagToQuote mocks base method.
func (m *MockTagUseCase) AddTagToQuote(ctx context.Context, quoteID int, cmd *commands.AddTagToQuoteCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagToQuote", ctx, quoteID, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTagToQuote indicates an expected call of AddTagToQuote.
func (mr *MockTagUseCaseMockRecorder) AddTagToQuote(ctx, quoteID, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagToQuote", reflect.TypeOf((*MockTagUseCase)(nil).AddTagToQuote), ctx, quoteID, cmd)
}

// CreateTag mocks base method.
func (m *MockTagUseCase) CreateTag(ctx context.Context, cmd *commands.CreateTagCommand) (*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, cmd)
	ret0, _ := ret[0].(*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockTagUseCaseMockRecorder) CreateTag(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTagUseCase)(nil).CreateTag), ctx, cmd)
}

// DeleteTag mocks base method.
func (m *MockTagUseCase) DeleteTag(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockTagUseCaseMockRecorder) DeleteTag(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagUseCase)(nil).DeleteTag), ctx, id)
}

// GetAllTags mocks base method.
func (m *MockTagUseCase) GetAllTags(ctx context.Context) ([]*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags", ctx)
	ret0, _ := ret[0].([]*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockTagUseCaseMockRecorder) GetAllTags(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockTagUseCase)(nil).GetAllTags), ctx)
}

// GetTagByID mocks base method.
func (m *MockTagUseCase) GetTagByID(ctx context.Context, id int) (*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByID", ctx, id)
	ret0, _ := ret[0].(*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByID indicates an expected call of GetTagByID.
func (mr *MockTagUseCaseMockRecorder) GetTagByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByID", reflect.TypeOf((*MockTagUseCase)(nil).GetTagByID), ctx, id)
}

// GetTagByName mocks base method.
func (m *MockTagUseCase) GetTagByName(ctx context.Context, name string) (*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByName", ctx, name)
	ret0, _ := ret[0].(*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByName indicates an expected call of GetTagByName.
func (mr *MockTagUseCaseMockRecorder) GetTagByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByName", reflect.TypeOf((*MockTagUseCase)(nil).GetTagByName), ctx, name)
}

// GetTagsByQuoteID mocks base method.
func (m *MockTagUseCase) GetTagsByQuoteID(ctx context.Context, quoteID int) ([]*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsByQuoteID", ctx, quoteID)
	ret0, _ := ret[0].([]*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsByQuoteID indicates an expected call of GetTagsByQuoteID.
func (mr *MockTagUseCaseMockRecorder) GetTagsByQuoteID(ctx, quoteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsByQuoteID", reflect.TypeOf((*MockTagUseCase)(nil).GetTagsByQuoteID), ctx, quoteID)
}

// RemoveTagFromQuote mocks base method.
func (m *MockTagUseCase) RemoveTagFromQuote(ctx context.Context, quoteID int, cmd *commands.RemoveTagFromQuoteCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagFromQuote", ctx, quoteID, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagFromQuote indicates an expected call of RemoveTagFromQuote.
func (mr *MockTagUseCaseMockRecorder) RemoveTagFromQuote(ctx, quoteID, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagFromQuote", reflect.TypeOf((*MockTagUseCase)(nil).RemoveTagFromQuote), ctx, quoteID, cmd)
}

// UpdateTag mocks base method.
func (m *MockTagUseCase) UpdateTag(ctx context.Context, id int, cmd *commands.UpdateTagCommand) (*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", ctx, id, cmd)
	ret0, _ := ret[0].(*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockTagUseCaseMockRecorder) UpdateTag(ctx, id, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTagUseCase)(nil).UpdateTag), ctx, id, cmd)
}
