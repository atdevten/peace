// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/usecases/mental_health_record_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/usecases/mental_health_record_usecase.go -destination=testutils/mocks/usecases/mental_health_record_usecase_mock.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	commands "github.com/atdevten/peace/internal/application/commands"
	entities "github.com/atdevten/peace/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockMentalHealthRecordUseCase is a mock of MentalHealthRecordUseCase interface.
type MockMentalHealthRecordUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMentalHealthRecordUseCaseMockRecorder
	isgomock struct{}
}

// MockMentalHealthRecordUseCaseMockRecorder is the mock recorder for MockMentalHealthRecordUseCase.
type MockMentalHealthRecordUseCaseMockRecorder struct {
	mock *MockMentalHealthRecordUseCase
}

// NewMockMentalHealthRecordUseCase creates a new mock instance.
func NewMockMentalHealthRecordUseCase(ctrl *gomock.Controller) *MockMentalHealthRecordUseCase {
	mock := &MockMentalHealthRecordUseCase{ctrl: ctrl}
	mock.recorder = &MockMentalHealthRecordUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMentalHealthRecordUseCase) EXPECT() *MockMentalHealthRecordUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMentalHealthRecordUseCase) Create(ctx context.Context, command commands.CreateMentalHealthRecordCommand) (*entities.MentalHealthRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, command)
	ret0, _ := ret[0].(*entities.MentalHealthRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMentalHealthRecordUseCaseMockRecorder) Create(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMentalHealthRecordUseCase)(nil).Create), ctx, command)
}

// Delete mocks base method.
func (m *MockMentalHealthRecordUseCase) Delete(ctx context.Context, command commands.DeleteMentalHealthRecordCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMentalHealthRecordUseCaseMockRecorder) Delete(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMentalHealthRecordUseCase)(nil).Delete), ctx, command)
}

// GetByCondition mocks base method.
func (m *MockMentalHealthRecordUseCase) GetByCondition(ctx context.Context, userID string, startedAt, endedAt *string) ([]*entities.MentalHealthRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCondition", ctx, userID, startedAt, endedAt)
	ret0, _ := ret[0].([]*entities.MentalHealthRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCondition indicates an expected call of GetByCondition.
func (mr *MockMentalHealthRecordUseCaseMockRecorder) GetByCondition(ctx, userID, startedAt, endedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCondition", reflect.TypeOf((*MockMentalHealthRecordUseCase)(nil).GetByCondition), ctx, userID, startedAt, endedAt)
}

// GetByID mocks base method.
func (m *MockMentalHealthRecordUseCase) GetByID(ctx context.Context, id, userID string) (*entities.MentalHealthRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id, userID)
	ret0, _ := ret[0].(*entities.MentalHealthRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMentalHealthRecordUseCaseMockRecorder) GetByID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMentalHealthRecordUseCase)(nil).GetByID), ctx, id, userID)
}

// GetHeatmap mocks base method.
func (m *MockMentalHealthRecordUseCase) GetHeatmap(ctx context.Context, command *commands.GetMentalHealthHeatmapCommand) (*commands.MentalHealthHeatmapResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeatmap", ctx, command)
	ret0, _ := ret[0].(*commands.MentalHealthHeatmapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeatmap indicates an expected call of GetHeatmap.
func (mr *MockMentalHealthRecordUseCaseMockRecorder) GetHeatmap(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeatmap", reflect.TypeOf((*MockMentalHealthRecordUseCase)(nil).GetHeatmap), ctx, command)
}

// GetStreak mocks base method.
func (m *MockMentalHealthRecordUseCase) GetStreak(ctx context.Context, command *commands.GetMentalHealthStreakCommand) (*commands.MentalHealthStreakResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreak", ctx, command)
	ret0, _ := ret[0].(*commands.MentalHealthStreakResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreak indicates an expected call of GetStreak.
func (mr *MockMentalHealthRecordUseCaseMockRecorder) GetStreak(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreak", reflect.TypeOf((*MockMentalHealthRecordUseCase)(nil).GetStreak), ctx, command)
}

// Update mocks base method.
func (m *MockMentalHealthRecordUseCase) Update(ctx context.Context, command commands.UpdateMentalHealthRecordCommand) (*entities.MentalHealthRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, command)
	ret0, _ := ret[0].(*entities.MentalHealthRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMentalHealthRecordUseCaseMockRecorder) Update(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMentalHealthRecordUseCase)(nil).Update), ctx, command)
}
